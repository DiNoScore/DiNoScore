name: Rust

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  format:
    name: cargo fmt (nightly)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt
          profile: minimal
      - name: Format
        run: cargo fmt -- --check

  test-shell:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: cachix/install-nix-action@v13
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Cache ~/.cargo
        uses: actions/cache@v1
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-test-shell-dotcargo
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-test-shell-build-target
      - name: Build in shell.nix
        run: nix-shell --pure --run "cargo build --all-targets --locked"

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        rust:
          #- 1.51.0 # MSRV
          - stable
          #- nightly
    steps:
      - uses: actions/checkout@v1
      - uses: cachix/install-nix-action@v13
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Setup environment (hack on Cargo)
        run: |
          mkdir -p ~/.local/bin
          cargo="cargo"
          echo "#!/bin/env bash" >> ~/.local/bin/cargo
          echo 'cmd=$(echo "'$cargo' $@")' >> ~/.local/bin/cargo
          echo 'nix-shell --run "$cmd"' >> ~/.local/bin/cargo
          chmod +x ~/.local/bin/cargo

          # Install build dependencies
          sudo apt install adwaita-icon-theme
      - name: Cache ~/.cargo
        uses: actions/cache@v1
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-test-dotcargo-${{ matrix.rust }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-test-build-target-${{ matrix.rust }}
      - name: build --all-targets
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-targets
      - name: test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose

  # https://github.com/MGlolenstine/gtk4-cross/blob/main/gtk4-cross-rust
  windows:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/mglolenstine/gtk4-cross:gtk-4.8
    steps:
      - uses: actions/checkout@v1
      - name: Install additional dependencies
        # gio is for the build script
        run: dnf install mingw64-poppler mingw64-poppler-glib mingw32-python3 rust-gio-devel adwaita-icon-theme wget -y && dnf clean all -y
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: x86_64-pc-windows-gnu
      - name: Cache ~/.cargo
        uses: actions/cache@v1
        with:
          path: ~/.cargo
          key: windows-dotcargo
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: windows-build-target
      - name: Cross compile for Windows
        run: |
          #!/bin/bash
          set -euo pipefail
          export PKG_CONFIG_PATH=/usr/lib64/pkgconfig:/usr/share/pkgconfig:$MINGW_PREFIX/lib/pkgconfig/:/usr/x86_64-w64-mingw32/lib/pkgconfig/

          cargo build --target=x86_64-pc-windows-gnu --release --locked

          mkdir -p package
          cp target/x86_64-pc-windows-gnu/release/*.exe package/
          # TODO remove
          mv package/viewer.exe package/DiNoScore-viewer.exe
          mv package/editor.exe package/DiNoScore-editor.exe
          mv package/cli.exe package/DiNoScore-cli.exe
      - name: Package
        run: |
          #!/bin/bash
          set -euo pipefail

          package

          # Application icon
          wget https://github.com/electron/rcedit/releases/download/v1.1.1/rcedit-x64.exe
          WINEPREFIX=/root/.wine wine rcedit-x64.exe "package/DiNoScore-viewer.exe" --set-icon "./res/de.piegames.dinoscore.ico"
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: DiNoScore-windows-${{ github.sha }}
          path: |
            ./package
          if-no-files-found: error
